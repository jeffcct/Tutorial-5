class Generator {
  constructor() {
    this.objects = [];
    
  }
  
  generate(num) {
    for (let i = 0; i < num; i++) {
      this.generateSingle();
    }
  }
  
  generateSingle() {
    let object = new Object(floor(random(width) / 10) * 10, floor(random(height) / 10) * 10);
    this.addTickEvents(object);
    this.addCollideEvents(object);
    append(this.objects, object);
  }
  
  addTickEvents(object) {
    object.addTickEvent(new Walk(object));
    
    let ranval = floor(random(0, 100));
    if (ranval == 0) {
      object.addCollideEvent(new Greenen(object));
    }
    ranval = floor(random(0, 100));
    if (ranval == 0) {
      object.addCollideEvent(new Bluen(object));
    }
    ranval = floor(random(0, 100));
    if (ranval == 0) {
      object.addCollideEvent(new Redden(object));
    }
    ranval = floor(random(0, 1));
    if (ranval == 0) {
      object.addCollideEvent(new Shrink(object));
    }
  }
  
  addCollideEvents(object) {
    let ranval = floor(random(0, 100));
    if (ranval == 0) {
      object.addCollideEvent(new redAbsorb(object));
    }
    ranval = floor(random(0, 100));
    if (ranval == 0) {
      object.addCollideEvent(new greenAbsorb(object));
    }
    ranval = floor(random(0, 100));
    if (ranval == 0) {
      object.addCollideEvent(new blueAbsorb(object));
    }
    ranval = floor(random(0, 100));
    if (ranval == 0) {
      object.addCollideEvent(new sizeAbsorb(object));
    }
    
    ranval = floor(random(0, 100));
    if (ranval == 0) {
      object.addCollideEvent(new redGive(object));
    }
    ranval = floor(random(0, 100));
    if (ranval == 0) {
      object.addCollideEvent(new greenGive(object));
    }
    ranval = floor(random(0, 100));
    if (ranval == 0) {
      object.addCollideEvent(new blueGive(object));
    }
  }
  
  update() {
    for (let object of this.objects) {
      object.update();
      object.show();  
    }

    for (let object of this.objects) {
      for (let object2 of this.objects) {
        if (object != object2 && object.position.equals(object2.position)) {
          object.onCollision(object2);
          object2.onCollision(object2, object);
        }
      }
    }
  }
}